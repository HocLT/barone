buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:1.2.3'
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
  }
}

plugins {
  // https://github.com/bintray/gradle-bintray-plugin
  id "com.jfrog.bintray" version "1.3.1"
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.triposo'
description = '''Android utilities we've extracted from our projects.'''
version = '1.0'

task wrapper(type: Wrapper) {
  // Run "./gradlew wrapper" after changing this value.
  gradleVersion = '2.5'
}

android {
  compileSdkVersion 23
  buildToolsVersion '23'

  defaultConfig {
    versionCode 1
    versionName version
    minSdkVersion 4
  }

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      res.srcDirs = ['res']
    }
  }
}


def siteUrl = 'https://github.com/triposo/barone'
def gitUrl = 'https://github.com/triposo/barone.git'
// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
bintray {
  user = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
  key = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""

  configurations = ['archives']
  publish = true

  pkg {
    repo = 'maven'
    name = 'barone'
    desc = description

    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = ['Apache-2.0']

    version {
      name = project.version
    }
  }
}

install {
  repositories.mavenInstaller {
    pom {
      project {
	packaging 'aar'

	name description
	url siteUrl

	licenses {
          license {
	    name 'The Apache Software License, Version 2.0'
	    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	  }
	}
	developers {
	  // ID corresponds to GitHub user name
	  developer {
	    id 'aleb'
	    name 'Alexandru Balut'
	    email 'alex@triposo.com'
	  }
	}
        scm {
	  connection gitUrl
	  developerConnection gitUrl
	  url siteUrl
        }
      }
    }
  }
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

